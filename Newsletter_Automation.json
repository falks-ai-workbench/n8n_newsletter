{
  "name": "Newsletter_Automation",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -1820,
        -340
      ],
      "id": "123481d3-0b79-4714-9a0e-25029d68342e",
      "name": "When clicking ‘Execute workflow’"
    },
    {
      "parameters": {
        "url": "https://www.all-ai.de/index.php?option=com_jmap&view=sitemap&format=rss",
        "options": {}
      },
      "type": "n8n-nodes-base.rssFeedRead",
      "typeVersion": 1.1,
      "position": [
        -1480,
        -520
      ],
      "id": "4ef0bcc5-7dca-41e6-adb5-0ef214c1e775",
      "name": "RSS Read"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "b99f2b41-0485-4100-a5fd-7d3a37134753",
              "name": "title",
              "value": "={{ $json.title }}",
              "type": "string"
            },
            {
              "id": "ed255d97-648b-4ee5-8752-4eb7656d288c",
              "name": "link",
              "value": "={{ $json.link }}",
              "type": "string"
            },
            {
              "id": "9ba890ae-c693-46b9-9082-f342cae52ba4",
              "name": "isoDate",
              "value": "={{ $json.isoDate }}",
              "type": "string"
            },
            {
              "id": "e2837fee-e337-47b9-8fd3-39c8cf1e25fd",
              "name": "content",
              "value": "={{ $json.content }}",
              "type": "string"
            },
            {
              "id": "00c5dbec-9f43-4cf2-b1d4-d14e56cc2075",
              "name": "word_count",
              "value": "={{ $json.word_count }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -1040,
        -400
      ],
      "id": "ae5263dc-0d4a-433a-9a8a-fc40603cea53",
      "name": "Reduce informations"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "02c2b083-72a7-4f0b-9baa-811764f237f6",
              "name": "system_prompt",
              "value": "=You are an AI assistant. Here is an article:\nTitle: {{$json[\"title\"]}}\nContent: {{$json[\"content\"]}}\n\nMy interests are:\n1. AI Automation\n2. MCP - Model Context Protocol\n3. RAG Retrieval Augmented Generation\n4. European AI Act\n5. No Code or Low Code AI Tools\n\nTask:\n- Rate how well this article matches any of my interests (1 = not relevant, 10 = extremely relevant).\n- List which interests match.\n- Suggest 2-3 relevant tags.\n\nOutput JSON: \n{\n  \"title\": \"{{ $json.title }}\"\n  \"rating\": <1-10>,\n  \"matching_interests\": [...], \n  \"tags\": [...]\n}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -880,
        -560
      ],
      "id": "6b3dd7fb-e6d0-4b0a-b90e-aad30f039853",
      "name": "Set UserPrompt"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const input = $json.text || $json.data || $json.body || $input.item.json.text;\nconst match = input.match(/{[\\s\\S]*?}/);\n\nif (!match) {\n  throw new Error(\"No JSON object found in the input text.\");\n}\n\nlet parsed;\ntry {\n  parsed = JSON.parse(match[0]);\n} catch (e) {\n  throw new Error(\"Failed to parse JSON: \" + e.message);\n}\n\n// Return a single object (not an array!) in 'Run Once for Each Item' mode\nreturn { json: parsed };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -300,
        -580
      ],
      "id": "153c2704-db7a-437f-b86e-afcc81fef4f1",
      "name": "Parse Output to JSON"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "title",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        -360,
        -120
      ],
      "id": "e7067f37-1574-4340-85e5-d34c2e441b03",
      "name": "Merge Data LLM+RSS"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "c0ce5ff3-8686-4c97-a314-26e1163fb80c",
              "leftValue": "={{ $json.rating }}",
              "rightValue": 7,
              "operator": {
                "type": "number",
                "operation": "gte"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -80,
        -580
      ],
      "id": "b3647c5b-2d39-4592-bcfa-1a59602e8e78",
      "name": "Rating 7+"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        -300,
        -400
      ],
      "id": "821473dc-ec1b-4abc-9256-7db14ca6df04",
      "name": "No Operation, do nothing1"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Try to get the input text from common fields\nconst input =\n  $json.text ||\n  $json.data ||\n  $json.body ||\n  $json.content ||\n  $input.item.json.text ||\n  $input.item.json.content ||\n  \"\";\n\n// Regex to match the first JSON object in the text (non-greedy)\nconst match = input.match(/{[\\s\\S]*?}/);\n\nif (!match) {\n  throw new Error(\"No JSON object found in the input text.\");\n}\n\nlet jsonString = match[0];\n\n// Clean up: Remove unescaped line breaks and fix bad escape sequences\njsonString = jsonString\n  // Replace unescaped line breaks inside JSON strings with \\n\n  .replace(/([^\\\\])\\\\n/g, '$1\\\\\\\\n') // double-escape existing \\n\n  .replace(/\\\\(?![\"\\\\/bfnrtu])/g, '\\\\\\\\') // escape lone backslashes\n  .replace(/[\\r\\n]+/g, ' '); // replace all CR/LF with space\n\nlet parsed;\ntry {\n  parsed = JSON.parse(jsonString);\n} catch (e) {\n  throw new Error(\"Failed to parse JSON: \" + e.message + \"\\nCleaned JSON: \" + jsonString);\n}\n\n// Only return title and summary\nreturn {\n  title: parsed.title,\n  summary: parsed.summary\n};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        180,
        -300
      ],
      "id": "51469de3-d400-4410-93f9-30bfe3df7a1b",
      "name": "Parse Output JSON",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "title",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        420,
        -140
      ],
      "id": "98a20c9b-c1e8-4f3e-a7e2-0c834f3e040f",
      "name": "Merge Data Summary + rest"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.noOp",
      "typeVersion": 1,
      "position": [
        420,
        -340
      ],
      "id": "2146269b-3af2-4b27-9935-9cb78254466b",
      "name": "No Operation, do nothing2"
    },
    {
      "parameters": {
        "jsCode": "let html = `<h1>Dein KI-Newsletter</h1>`;\nfor (const item of items) {\n  html += `\n    <h2>${item.json.title}</h2>\n    <hr>\n    <p>${item.json.tags}</p>\n    <p>${item.json.isoDate}</p>\n    <p>${item.json.summary}</p>\n    <p><a href=\"${item.json.link}\">Link zum Thema</a></p>\n    <hr>`;\n}\nreturn [{ json: { newsletter: html } }];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        780,
        -140
      ],
      "id": "f3a0385f-ccc0-4c33-8990-e06d5d602dcc",
      "name": "Format HTML EMail"
    },
    {
      "parameters": {
        "sendTo": "your_email@gmail.com",
        "subject": "AI News",
        "message": "=Hello AI Nerd,\n\nhere is your weekly dose of AI News.\n\n{{ $json.newsletter }}",
        "options": {}
      },
      "type": "n8n-nodes-base.gmail",
      "typeVersion": 2.1,
      "position": [
        980,
        -140
      ],
      "id": "040c7f49-3516-43d2-8bff-55b7bf7dbe6d",
      "name": "Send Email Newsletter",
      "webhookId": "9520be00-9060-4953-bf96-b1e0a6301c65",
      "credentials": {
        "gmailOAuth2": {
          "id": "cCb277azCGWyAYtD",
          "name": "Gmail account"
        }
      }
    },
    {
      "parameters": {
        "model": "qwen3:14b-q4_K_M",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -620,
        -320
      ],
      "id": "cecc8919-8b7b-4a09-9d55-8d62520954b1",
      "name": "Model QWEN3 14B-q4",
      "credentials": {
        "ollamaApi": {
          "id": "ysLr6PSOVMtUwU7u",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "model": "gemma3:latest",
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOllama",
      "typeVersion": 1,
      "position": [
        -180,
        -20
      ],
      "id": "5c8d5c75-30ff-47d3-8f68-c7e237c06584",
      "name": "Model Gemma3 4B",
      "credentials": {
        "ollamaApi": {
          "id": "ysLr6PSOVMtUwU7u",
          "name": "Ollama account"
        }
      }
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "={{ $json.system_prompt }}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -700,
        -560
      ],
      "id": "a3c98eb4-dfe8-4e85-a0ed-2414c98f560f",
      "name": "Rating & Tagging Articles",
      "retryOnFail": true,
      "waitBetweenTries": 3000,
      "maxTries": 2,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "content": "## Set your RSS Feed and interests\n- Setup your RSS Feed in the RSS-Feed Node -> double check if you get all needed columns\n- Change your interests in the Set-Node \"Set Userprompt\"\n- Update your Postgres credentials\n\n\n",
        "height": 800,
        "width": 880,
        "color": 3
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -1640,
        -660
      ],
      "id": "3b144818-7855-4fd4-8d45-05fded3e34c3",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Rate Articles, summarize. Just keep articles who have a rating 7+\n- Download from Ollama: Model QWEN3 14B-q4 and Model gemma3:latest or choose one of your local models",
        "height": 800,
        "width": 1060,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        -740,
        -660
      ],
      "id": "d2da2a34-c000-4e01-815b-4209d58c6d60",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "## Prepare and send Newsletter\n- Add your Google Auth2 cred for Gmail\n- Change the Email adress to your desired one",
        "height": 800,
        "width": 780,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        340,
        -660
      ],
      "id": "3ae51830-1f60-4dee-9635-d517797576d5",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "CREATE SCHEMA IF NOT EXISTS ai_references;\n\nCREATE TABLE IF NOT EXISTS ai_references.n8n_newsletter (\n    id SERIAL PRIMARY KEY,\n    title VARCHAR(255) NOT NULL,\n    word_count INTEGER,\n    import_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP,\n    pup_date TIMESTAMPTZ,\n    relevant BOOLEAN NOT NULL DEFAULT false,\n    score INTEGER NOT NULL DEFAULT 1 CHECK (score BETWEEN 1 AND 10)\n);",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1620,
        -340
      ],
      "id": "c72d432b-c327-46b1-8366-7709cd9f8345",
      "name": "Create DB and Schema if not exists",
      "credentials": {
        "postgres": {
          "id": "nGHKHAU22fwIvYvp",
          "name": "Postgres - Supabase"
        }
      }
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "ai_references",
          "mode": "list",
          "cachedResultName": "ai_references"
        },
        "table": {
          "__rl": true,
          "value": "n8n_newsletter",
          "mode": "list",
          "cachedResultName": "n8n_newsletter"
        },
        "limit": 500,
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        -1460,
        -160
      ],
      "id": "082655e9-3e98-4f99-bf16-65122d4de2ab",
      "name": "Postgres",
      "credentials": {
        "postgres": {
          "id": "nGHKHAU22fwIvYvp",
          "name": "Postgres - Supabase"
        }
      }
    },
    {
      "parameters": {
        "mergeByFields": {
          "values": [
            {
              "field1": "title",
              "field2": "title"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.compareDatasets",
      "typeVersion": 2.3,
      "position": [
        -1240,
        -300
      ],
      "id": "2df777fb-9f0e-426d-b545-ef09bdd52aa8",
      "name": "Compare Datasets"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=You are a helpful summarizer.\n\n{{ $json.content }}\n\nGoal\nWrite a summary of maximum 170 words.\n\nRules\nDo NOT translate the text.\n\nAlways use the same language as the input text.\n\nIf the input is in German, write the summary in German. If the input is in English, write the summary in English. If the input is in another language, use that language for the summary.\n\nDo not add any explanations or comments.\n\nOutput JSON:\n{\n\"title\": \"{{ $json.title }}\",\n\"summary\": \"...\"\n}",
        "batching": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chainLlm",
      "typeVersion": 1.7,
      "position": [
        -180,
        -240
      ],
      "id": "a0b43f07-0bf8-4868-a910-cddf252150f6",
      "name": "Summarize Article",
      "retryOnFail": true,
      "onError": "continueErrorOutput"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "// Zählt die Wörter im content-Feld und fügt das Ergebnis als word_count hinzu\nconst content = $input.item.json.content || \"\";\nconst wordCount = content\n  .replace(/<[^>]*>/g, ' ') // HTML-Tags entfernen, falls vorhanden\n  .trim()\n  .split(/\\s+/)\n  .filter(Boolean)\n  .length;\n\n$input.item.json.word_count = wordCount;\nreturn $input.item;\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        -1300,
        -520
      ],
      "id": "268a046b-5035-4379-833b-dbd1cbcc7963",
      "name": "Count words"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "title",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        180,
        -520
      ],
      "id": "12795406-8265-4e5d-8776-69b7cfa8b007",
      "name": "Merge"
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "ai_references",
          "mode": "list",
          "cachedResultName": "ai_references"
        },
        "table": {
          "__rl": true,
          "value": "n8n_newsletter",
          "mode": "list",
          "cachedResultName": "n8n_newsletter"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "title": "={{ $json.title }}",
            "word_count": "={{ $json.word_count }}",
            "pup_date": "={{ $json.isoDate }}",
            "score": "={{ $json.rating }}",
            "relevant": false
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "word_count",
              "displayName": "word_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "import_date",
              "displayName": "import_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "pup_date",
              "displayName": "pup_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "relevant",
              "displayName": "relevant",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "score",
              "displayName": "score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        420,
        -520
      ],
      "id": "f16b306b-0bf1-4055-8b68-ed526d5f885e",
      "name": "Insert records <7",
      "credentials": {
        "postgres": {
          "id": "nGHKHAU22fwIvYvp",
          "name": "Postgres - Supabase"
        }
      }
    },
    {
      "parameters": {
        "schema": {
          "__rl": true,
          "value": "ai_references",
          "mode": "list",
          "cachedResultName": "ai_references"
        },
        "table": {
          "__rl": true,
          "value": "n8n_newsletter",
          "mode": "list",
          "cachedResultName": "n8n_newsletter"
        },
        "columns": {
          "mappingMode": "defineBelow",
          "value": {
            "title": "={{ $json.title }}",
            "word_count": "={{ $json.word_count }}",
            "pup_date": "={{ $json.isoDate }}",
            "score": "={{ $json.rating }}",
            "relevant": true
          },
          "matchingColumns": [
            "id"
          ],
          "schema": [
            {
              "id": "id",
              "displayName": "id",
              "required": false,
              "defaultMatch": true,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "title",
              "displayName": "title",
              "required": true,
              "defaultMatch": false,
              "display": true,
              "type": "string",
              "canBeUsedToMatch": true
            },
            {
              "id": "word_count",
              "displayName": "word_count",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true
            },
            {
              "id": "import_date",
              "displayName": "import_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true,
              "removed": true
            },
            {
              "id": "pup_date",
              "displayName": "pup_date",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "dateTime",
              "canBeUsedToMatch": true
            },
            {
              "id": "relevant",
              "displayName": "relevant",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "boolean",
              "canBeUsedToMatch": true,
              "removed": false
            },
            {
              "id": "score",
              "displayName": "score",
              "required": false,
              "defaultMatch": false,
              "display": true,
              "type": "number",
              "canBeUsedToMatch": true,
              "removed": false
            }
          ],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.6,
      "position": [
        780,
        -360
      ],
      "id": "deb81770-297e-45c1-8d8a-711533aea50e",
      "name": "Insert records >=7",
      "credentials": {
        "postgres": {
          "id": "nGHKHAU22fwIvYvp",
          "name": "Postgres - Supabase"
        }
      }
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Execute workflow’": {
      "main": [
        [
          {
            "node": "Create DB and Schema if not exists",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RSS Read": {
      "main": [
        [
          {
            "node": "Count words",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Reduce informations": {
      "main": [
        [
          {
            "node": "Set UserPrompt",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Data LLM+RSS",
            "type": "main",
            "index": 1
          },
          {
            "node": "Merge",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Set UserPrompt": {
      "main": [
        [
          {
            "node": "Rating & Tagging Articles",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Output to JSON": {
      "main": [
        [
          {
            "node": "Rating 7+",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data LLM+RSS": {
      "main": [
        [
          {
            "node": "Summarize Article",
            "type": "main",
            "index": 0
          },
          {
            "node": "Merge Data Summary + rest",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Rating 7+": {
      "main": [
        [
          {
            "node": "Merge Data LLM+RSS",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Merge",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Parse Output JSON": {
      "main": [
        [
          {
            "node": "Merge Data Summary + rest",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge Data Summary + rest": {
      "main": [
        [
          {
            "node": "Format HTML EMail",
            "type": "main",
            "index": 0
          },
          {
            "node": "Insert records >=7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format HTML EMail": {
      "main": [
        [
          {
            "node": "Send Email Newsletter",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Model QWEN3 14B-q4": {
      "ai_languageModel": [
        [
          {
            "node": "Rating & Tagging Articles",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Model Gemma3 4B": {
      "ai_languageModel": [
        [
          {
            "node": "Summarize Article",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Rating & Tagging Articles": {
      "main": [
        [
          {
            "node": "Parse Output to JSON",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "No Operation, do nothing1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create DB and Schema if not exists": {
      "main": [
        [
          {
            "node": "RSS Read",
            "type": "main",
            "index": 0
          },
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Compare Datasets": {
      "main": [
        [
          {
            "node": "Reduce informations",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Summarize Article": {
      "main": [
        [
          {
            "node": "Parse Output JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Count words": {
      "main": [
        [
          {
            "node": "Compare Datasets",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge": {
      "main": [
        [
          {
            "node": "Insert records <7",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Insert records >=7": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "ebdf7803-f0c9-4179-8dc8-f815285f3ccb",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7d384291e91e15297c920da411b4548e6ae4d741e04867a6c78ba5c13a77872b"
  },
  "id": "D52UhboStgsiDVAm",
  "tags": [
    {
      "name": "Gmail",
      "id": "t8g1bzyYGQM5ggH6",
      "createdAt": "2025-06-26T18:21:38.576Z",
      "updatedAt": "2025-06-26T18:21:38.576Z"
    },
    {
      "name": "Postgres",
      "id": "qIGNsK2mwRhrvcaf",
      "createdAt": "2025-06-26T18:21:42.917Z",
      "updatedAt": "2025-06-26T18:21:42.917Z"
    },
    {
      "name": "RSS",
      "id": "clxg6SupwN47TnEt",
      "createdAt": "2025-06-26T18:21:48.079Z",
      "updatedAt": "2025-06-26T18:21:48.079Z"
    },
    {
      "name": "n8n-local",
      "id": "cYOPW2d1pSfhhhgG",
      "createdAt": "2025-06-26T18:22:07.129Z",
      "updatedAt": "2025-06-26T18:22:07.129Z"
    }
  ]
}